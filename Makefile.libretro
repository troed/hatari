CORE_DIR := .
LIBRETRO_DIR = $(CORE_DIR)/libretro
HATARI_DIR := $(CORE_DIR)/src/CMakeFiles/hatari.dir
ZLIB_DIR = $(LIBRETRO_DIR)/utils/zlib
STATIC_LINKING=0
STATIC_LINKING_LINK=0
SHELL = bash

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

EXTERNAL_ZLIB = 0
CFLAGS += -DWITH_SDL2 
CFLAGS += -D_REENTRANT 
CFLAGS += -DHAVE_UTIME_H 
CFLAGS += -DENABLE_WINUAE_CPU 

TARGET_NAME	:= hatari
GIT_VERSION := "$(shell git rev-parse --short HEAD || echo unknown)"
ifneq ($(GIT_VERSION)," unknown")
	CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
endif

ifeq ($(platform), unix)
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED :=  -lpthread -shared -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined -Wl,--as-needed
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD
ifeq ($(ARCH), arm)
   CFLAGS += -mno-unaligned-access
endif
else ifeq ($(platform), android)
   CC = arm-linux-androideabi-gcc
   AR = @arm-linux-androideabi-ar
   LD = @arm-linux-androideabi-g++ 
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED :=  -Wl,--fix-cortex-a8 -llog -lz -shared -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined
   PLATFLAGS := -DAND -DLSB_FIRST -DALIGN_DWORD
   
# Classic Platforms ####################
# Platform affix = classic_<ISA>_<ÂµARCH>
# Help at https://modmyclassic.com/comp

# (armv7 a7, hard point, neon based) ### 
# NESC, SNESC, C64 mini 
else ifeq ($(platform), classic_armv7_a7)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	SHARED :=  -lz -lpthread -shared -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined
	CFLAGS += -Ofast \
	-fdata-sections -ffunction-sections -Wl,--gc-sections \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	HAVE_NEON = 1
	ARCH = arm
	PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD
	ifeq ($(shell echo `$(CC) -dumpversion` "< 4.9" | bc -l), 1)
	  CFLAGS += -march=armv7-a
	else
	  CFLAGS += -march=armv7ve
	  # If gcc is 5.0 or later
	  ifeq ($(shell echo `$(CC) -dumpversion` ">= 5" | bc -l), 1)
	    LDFLAGS += -static-libgcc -static-libstdc++
	  endif
	endif
#######################################

else ifeq ($(platform), osx)
	TARGET := $(TARGET_NAME)_libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD

# ARM
else ifneq (,$(findstring armv,$(platform)))
   CC = gcc
	TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC -fsigned-char
   SHARED :=  -lz -lpthread -shared -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD
   CFLAGS += -marm
ifneq (,$(findstring neon,$(platform)))
   CFLAGS += -mfpu=neon
   ASFLAGS += -mfpu=neon
   HAVE_NEON = 1
endif
ifneq (,$(findstring softfloat,$(platform)))
   CFLAGS += -mfloat-abi=softfp
   ASFLAGS += -mfloat-abi=softfp
else ifneq (,$(findstring hardfloat,$(platform)))
   CFLAGS += -mfloat-abi=hard
   ASFLAGS += -mfloat-abi=hard
endif
   CFLAGS += -DARM

# iOS
else ifneq (,$(findstring ios,$(platform)))

	TARGET := $(TARGET_NAME)_libretro_ios.dylib
	fpic := -fPIC
	SHARED := -dynamiclib

	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	endif
   ifeq ($(platform),ios-arm64)
     CC = cc -arch arm64 -isysroot $(IOSSDK)      
   else
	  CC = cc -arch armv7 -isysroot $(IOSSDK)
   endif
   CFLAGS += -DIOS -marm -DHAVE_POSIX_MEMALIGN=1 -w

ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
	CC += -miphoneos-version-min=8.0
	CFLAGS += -miphoneos-version-min=8.0
else
	CC += -miphoneos-version-min=5.0
	CFLAGS += -miphoneos-version-min=5.0
endif

else ifeq ($(platform), tvos-arm64)
	TARGET := $(TARGET_NAME)_libretro_tvos.dylib
	fpic := -fPIC
	SHARED := -dynamiclib

	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk appletvos Path)
	endif
	CFLAGS += -DIOS -marm -DHAVE_POSIX_MEMALIGN=1 -w

else ifeq ($(platform), wii)
	TARGET := $(TARGET_NAME)_libretro_wii.a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)   
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) -I$(DEVKITPRO)/libogc/include \
	-D__powerpc__ -D__POWERPC__ -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
   SHARED :=   -lm -lpthread -lc
   PLATFLAGS :=  -DALIGN_DWORD
   EXTERNAL_ZLIB = 1
	STATIC_LINKING=1
	STATIC_LINKING_LINK=1
# Nintendo Game Cube / Wii / WiiU
else ifeq ($(platform), wiiu)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)  
   PLATFORM_DEFINES += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN 
   PLATFORM_DEFINES += -DGEKKO -mcpu=750 -meabi -mhard-float -DHAVE_STRTOF_L -DHAVE_LOCALE
   PLATFORM_DEFINES += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int -D_GNU_SOURCE
   PLATFORM_DEFINES += -DWIIU -DHW_RVL -mwup -DWORDS_BIGENDIAN=1 -Dpowerpc -D__POWERPC__ -D__ppc__ 
   STATIC_LINKING=1
   STATIC_LINKING_LINK = 1
   CFLAGS +=  -DALIGN_DWORD $(PLATFORM_DEFINES) -I$(ZLIB_DIR) 
else ifeq ($(platform), ps3)
	TARGET := $(TARGET_NAME)_libretro_ps3.a
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   SHARED :=   -lm -lpthread -lc
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-D__CELLOS_LV2 -DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) 
   PLATFLAGS :=  -DALIGN_DWORD 
   EXTERNAL_ZLIB = 1
	STATIC_LINKING=1
	STATIC_LINKING_LINK=1
else ifeq ($(platform), vita)
	TARGET := $(TARGET_NAME)_libretro_vita.a
   CC = arm-vita-eabi-gcc
   CXX = arm-vita-eabi-g++
   AR = arm-vita-eabi-ar
	CFLAGS += -DLSB_FIRST -DSDL_BYTEORDER=SDL_LIL_ENDIAN 
   PLATFLAGS :=  -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int -DHAVE_STRTOUL -DVITA -I$(ZLIB_DIR) 
	STATIC_LINKING=1
	STATIC_LINKING_LINK=1
else
   PLATFLAGS :=  -DLSB_FIRST -DALIGN_DWORD -DWIN32PORT -DWIN32
	TARGET := $(TARGET_NAME)_libretro.dll
   SHARED := -shared -static-libgcc -s -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined 
	EXTERNAL_ZLIB = 1
endif

ZLIB =
ifneq ($(EXTERNAL_ZLIB), 1)
ZLIB = -lz
endif

ifeq ($(DEBUG), 1)
CFLAGS += -Og -g
else
CFLAGS += -funroll-loops -ffast-math -fomit-frame-pointer -O3
endif
CFLAGS += -fsigned-char -D__LIBRETRO__ -fno-builtin

CFLAGS   += $(fpic) $(PLATFLAGS)
CXXFLAGS := $(CFLAGS)
CPPFLAGS := $(CFLAGS)

CPU = $(CORE_DIR)/src/cpu
FALCON = $(CORE_DIR)/src/falcon
DBG = $(CORE_DIR)/src/debug
FLP = $(CORE_DIR)/src
GUI = $(LIBRETRO_DIR)/gui-retro
LIBUTILS = $(LIBRETRO_DIR)/utils

include Makefile.common

# Re-use Hatari object files from its native build process
#OBJECTS := $(HATARI_O)
# Build libretro specific files
OBJECTS += $(SOURCES_C:.c=.o)
# Re-use libraries created from Hatari's native build process when linking
HATARI_LIB := $(CPU)/libUaeCpu.a $(FALCON)/libFalcon.a $(FLP)/libFloppy.a $(DBG)/libDebug.a

SHARED += -lSDL2 -lpng /usr/local/lib/libcapsimage.so -ludev -lreadline -lz -lSM -lICE -lX11 -lXext 

all: pre-build $(TARGET)

pre-build:
# Use Hatari's cmake build system to build all libraries and most other object files. It will fail to link the final Hatari executable, which is fine for our use
	- cmake -DCMAKE_C_FLAGS="$(CFLAGS) -I../libretro/include -I/usr/include -I/usr/include/SDL2 -I../libretro -I../libretro/libretro-common/include -I../libretro/libretro-common/include/compat/zlib -I../libretro/utils" .;VERBOSE=1 make

$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING_LINK),1)
	$(AR) rcs $@ $(OBJECTS) $(HATARI_O) $(HATARI_LIB) 
else
	$(CC) $(CFLAGS) $(INCFLAGS) $(LDFLAGS) $(OBJECTS) $(HATARI_O) $(HATARI_LIB) -o $@ -lm $(ZLIB) $(SHARED)
endif

%.o: %.c
	$(CC) $(CFLAGS) $(INCFLAGS) -c -o $@ $<

clean:
	rm -f $(OBJECTS) $(HATARI_O) $(TARGET) $(HATARI_LIB) 

.PHONY: clean
