From 0c09a00f2fbbfd6ba23f14b93e3cc71f32098364 Mon Sep 17 00:00:00 2001
From: Eero Tamminen <oak@helsinkinet.fi>
Date: Wed, 1 Apr 2020 11:50:48 +0300
Subject: [PATCH 1/3] Workaround SysRq task list Oops on 030

Kernel NULL pointer OOPSes with following, due to its bus_error030() not
respecting page faults being disabled in copy_from_kernel_nofault():
          # echo t > /proc/sysrq-trigger

Because it's unclear whether 'I' tasks trigger page faults on other
platforms, I'm calling this a workaround instead of a fix.
---
 kernel/workqueue.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index c41c3c17b..0d4655a40 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -4640,8 +4640,11 @@ void print_worker_info(const char *log_lvl, struct task_struct *task)
 	 */
 	copy_from_kernel_nofault(&fn, &worker->current_func, sizeof(fn));
 	copy_from_kernel_nofault(&pwq, &worker->current_pwq, sizeof(pwq));
-	copy_from_kernel_nofault(&wq, &pwq->wq, sizeof(wq));
-	copy_from_kernel_nofault(name, wq->name, sizeof(name) - 1);
+	/* current_pwq is NULL for 030 'I' tasks, and this would fault 2x */
+	if (pwq) {
+		copy_from_kernel_nofault(&wq, &pwq->wq, sizeof(wq));
+		copy_from_kernel_nofault(name, wq->name, sizeof(name) - 1);
+	}
 	copy_from_kernel_nofault(desc, worker->desc, sizeof(desc) - 1);
 
 	if (fn || name[0] || desc[0]) {
-- 
2.20.1

